// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(dbgenerated("gen_random_uuid()"))
  name                String?
  email               String             @unique
  password            String
  userType            EUserType
  status              EUserStatus?       @default(OFFLINE)
  userAccountStatus   EUserAccountStatus @default(ACTIVE)
  forcePasswordChange Boolean            @default(false)

  // Login bilgileri
  lastLoginDate      DateTime?
  lastLoginIp        String?
  lastLoginUseragent String?
  lastLoginOs        String?
  lastLoginDevice    String?
  lastLoginBrowser   String?
  lastLoginIpAddress String?
  lastLogoutDate     DateTime?

  // Son giri≈ü lokasyon bilgileri
  lastLoginLocationStaticName    String?
  lastLoginLocationStaticAddress String?
  lastLoginLocationStaticLat     Float?
  lastLoginLocationStaticLong    Float?

  currentLocation   Location? @relation(fields: [currentLocationId], references: [id])
  currentLocationId String?

  logs AccessLog[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Location {
  id          String  @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  description String?
  address     String?
  latitude    Float?
  longitude   Float?

  logs        AccessLog[]
  activeUsers User[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model AccessLog {
  id                    String      @id @default(dbgenerated("gen_random_uuid()"))
  actionType            EActionType
  ipAddress             String?
  userAgent             String?
  browser               String?
  os                    String?
  device                String?
  locationStaticName    String?
  locationStaticAddress String?
  locationStaticLat     Float?
  locationStaticLong    Float?

  user       User     @relation(fields: [userId], references: [id])
  userId     String
  location   Location @relation(fields: [locationId], references: [id])
  locationId String

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

enum EUserType {
  SUPER_ADMIN
  MANAGER_ADMIN
  PERSONAL
}

enum EUserStatus {
  ONLINE
  OFFLINE
}

enum EUserAccountStatus {
  ACTIVE
  INACTIVE
}

enum EActionType {
  CHECK_IN
  CHECK_OUT
}
